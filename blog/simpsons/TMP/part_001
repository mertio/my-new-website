\documentclass[conference]<<1>>IEEEtran<<1>>
\IEEEoverridecommandlockouts
\usepackage<<2>>cite<<2>>
\usepackage<<3>>amsmath,amssymb,amsfonts<<3>>
\usepackage<<4>>algorithmic<<4>>
\usepackage<<5>>graphicx<<5>>
\usepackage<<6>>textcomp<<6>>
\usepackage[utf8]<<7>>inputenc<<7>>
\usepackage<<8>>xcolor<<8>>

\begin<<11>>document<<11>>
\begin<<120>>tex2html_deferred<<120>>\par\end<<121>>tex2html_deferred<<121>>
\title<<104>>Determining the Certain Times Characters Appear in a Simpsons Episode Using Image Recognition with Convolutional Neural Networks\\ 
<<12>><<12>>
<<104>>
\begin<<122>>tex2html_deferred<<122>>\par\end<<123>>tex2html_deferred<<123>>
\begin<<124>>tex2html_deferred<<124>>\author<<119>>\IEEEauthorblockN<<13>>Mert Buğra Bıçak<<13>>
\IEEEauthorblockA<<105>>\textit<<14>>Department of Computer Engineering<<14>> \\ 
\textit<<15>>Akdeniz University<<15>>\\ 
Antalya, Turkey \\ 
mertbbicak@gmail.com<<105>>
<<119>>\end<<125>>tex2html_deferred<<125>>
\begin<<126>>tex2html_deferred<<126>>\par\end<<127>>tex2html_deferred<<127>>
\maketitle
\begin<<128>>tex2html_deferred<<128>>\par\end<<129>>tex2html_deferred<<129>>
\begin<<16>>abstract<<16>>
In this project the goal will be to use convolutional neural networks and deep learning to build an application that takes in a Simpsons episode and a character as input and returns in what parts of the episode the character appears as output. The use of this application will be making compilation videos of Simpsons characters a lot easier. Instead of scanning through hours of footage in the Simpsons archive to find the scenes of the character of interest, it will now be possible to just choose the character and get what time frame they appear in in the episode. 
\end<<17>>abstract<<17>>
\begin<<130>>tex2html_deferred<<130>>\par\end<<131>>tex2html_deferred<<131>>
\begin<<18>>IEEEkeywords<<18>>
convolutional, neural, network, deep learning, image classification, Simpsons
\begin<<132>>tex2html_deferred<<132>>\par\end<<133>>tex2html_deferred<<133>>
\end<<19>>IEEEkeywords<<19>>
\begin<<134>>tex2html_deferred<<134>>\par\end<<135>>tex2html_deferred<<135>>
\section<<20>>Introduction<<20>>
The application that I have developed for this project works by taking a directory of episodes and a specific character(1 of 18 selectable characters) as input, dividing up each episode video into individual image frames for every 3 seconds of the video and checking each of these images to see if that character is in it. If the prediction for the character in an image is both higher than the other possible 17 characters and also above 0.6, the images is accepted.  In the end it gives an output in a grid format that consists of the accepted image thumbnails, the time frame the character appeared, and the episode that the image occurs in. The user can observe the images and see when and what episode the desired character occurs in. It uses a 9 layer convolutional neural network trained up to 70\% accuracy that takes in 64x64x3 image inputs and gives 18 outputs, each one signifying the probability of a character. This neural network was trained with a data-set of around 6000 images of 18 Simpsons characters. In this paper, we will observe the development of this application in detail.
\begin<<136>>tex2html_deferred<<136>>\par\end<<137>>tex2html_deferred<<137>>
\section<<21>>Implementation Details<<21>>
Below are the tools and technologies that were used in the development of this project. 
\begin<<138>>tex2html_deferred<<138>>\par\end<<139>>tex2html_deferred<<139>>
\subsection<<22>>Programming Language and Framework<<22>>
I have used the Java programming language and the ;SPMquot;Deeplearning4j;SPMquot; framework to build the image classifier network and used JavaFX to build a basic, user friendly GUI for the application. As a starting basis for the deep learning task, I used an image classification example from the Deeplearning4j Github page\cite<<23>>b1<<23>> and built upon it. The loading of the training set and other small tasks were done with the help of this code. The first convolutional neural network featured (Model A) was heavily inspired by the LeNet model neural network. The other one (Model B), which was the one that worked the best and was used for the application, was built and configured by myself. 
\begin<<140>>tex2html_deferred<<140>>\par\end<<141>>tex2html_deferred<<141>>
\subsection<<24>>Data Set<<24>>
As the data-set, I used ;SPMquot;the Simpsons Characters Data;SPMquot; from the user alexattia in the website www.kaggle.com.\cite<<25>>b2<<25>> This dataset contains many hundreds of pictures each for more than 20 of the characters in the show to train and test the image classifier. Since some of the characters had too few images to get good enough training results, I decided to narrow the number of characters down to 18.
\begin<<142>>tex2html_deferred<<142>>\par\end<<143>>tex2html_deferred<<143>>
\section<<26>>Neural network Models Tried<<26>>
For the the image classification task, I built 2 different convolutional neural network models. They differ in the number of convolutional layers and dense layers and got different results. Below are the basic descriptions for each neural network. e.g. how many layers, activation functions, learning rate, etc. and the filter sizes and stride counts can be observed in their respective diagrams.
\subsection<<27>>Model A<<27>>
This neural network has 6 layers. An input layer, 2 convolutional layers, 2 max pooling layers, a dense layer and the output layer. It uses the RELU function as the activation function in the middle layers and uses the softmax function in the last one. It has a learning rate of 0.001 and momentum of 0.9.
\begin<<144>>tex2html_deferred<<144>>\par\end<<145>>tex2html_deferred<<145>>
\begin<<28>>figure<<28>>[htbp]
\begin<<146>>tex2html_deferred<<146>>\centerline<<106>>\includegraphics[scale=0.8]<<29>>modelADiagram.jpg<<29>><<106>>\end<<147>>tex2html_deferred<<147>>
\begin<<148>>tex2html_deferred<<148>>\caption<<30>>Diagram for neural network model A.<<30>>\end<<149>>tex2html_deferred<<149>>
\label<<31>>fig<<31>>
\end<<32>>figure<<32>>
\begin<<150>>tex2html_deferred<<150>>\par\end<<151>>tex2html_deferred<<151>>
\subsection<<33>>Model B<<33>>
This neural network has 10 layers. 1 input layer, 3 convolutional layers, 3 max pooling layers, 2 dense layers and an output layer. The hidden layers of this network use the LEAKYRELU function and the function of the last layer is the softmax function. It has a learning rate of 0.01 and a momentum of 0.9. 
\begin<<152>>tex2html_deferred<<152>>\par\end<<153>>tex2html_deferred<<153>>
\begin<<34>>figure<<34>>[htbp]
\begin<<154>>tex2html_deferred<<154>>\centerline<<107>>\includegraphics[scale=0.83]<<35>>modelBDiagram.jpg<<35>><<107>>\end<<155>>tex2html_deferred<<155>>
\begin<<156>>tex2html_deferred<<156>>\caption<<36>>Diagram for neural network model B<<36>>\end<<157>>tex2html_deferred<<157>>
\label<<37>>fig<<37>>
\end<<38>>figure<<38>>
\begin<<158>>tex2html_deferred<<158>>\par\end<<159>>tex2html_deferred<<159>>
\section<<39>>The Learning Period<<39>>
\begin<<160>>tex2html_deferred<<160>>\par\end<<161>>tex2html_deferred<<161>>
Before we move on to the training progress and results for each respective network, let us take a look at the common steps each network takes before and during the training procedure and what class in Deeplearning4j is used for each of them.
\begin<<40>>itemize<<40>>
\begin<<162>>tex2html_deferred<<162>>\par\end<<163>>tex2html_deferred<<163>>
\item Load all image data along with their labels using the FileSplit class.
\begin<<164>>tex2html_deferred<<164>>\par\end<<165>>tex2html_deferred<<165>>
\item Automatically improve data-set by making necessary eliminations using the BalancedPathFilter class. After doing this, approximately 6000 images were left in the data-set, around 5000 of them being for training and around 1000 being for testing.
\begin<<166>>tex2html_deferred<<166>>\par\end<<167>>tex2html_deferred<<167>>
\item Split the data-set into two, 80\% of it being the training set and 20\% of it being the test set using the InputSplit class.
\begin<<168>>tex2html_deferred<<168>>\par\end<<169>>tex2html_deferred<<169>>
\item Using the DataNormalization class, we normalize the images into a range of 0 to 1 for smoother learning.
\begin<<170>>tex2html_deferred<<170>>\par\end<<171>>tex2html_deferred<<171>>
\item Next we create a MultiLayerNetwork instance by either creating a new model (one of A or B in this case) or loading one from a file.
\begin<<172>>tex2html_deferred<<172>>\par\end<<173>>tex2html_deferred<<173>>
\item We use the RecordReader and DataSetIterator classes to fetch our training data and make it ready to be iterated through.
\begin<<174>>tex2html_deferred<<174>>\par\end<<175>>tex2html_deferred<<175>>
\item Then for a specific number of epochs(1 traversal through the whole data-set) we train the network using the network.fit(..) method. During training, we get the cost vs. iteration graph and the movement of the parameters across iterations as a UI in localhost:9000.
\begin<<176>>tex2html_deferred<<176>>\par\end<<177>>tex2html_deferred<<177>>
\item After training is done, we load the test set and get the necessary statistics from running the network on this set. Statistics that we will be observing further on in this paper.
\begin<<178>>tex2html_deferred<<178>>\par\end<<179>>tex2html_deferred<<179>>
\item And lastly, we save the network model as a bin file.
\begin<<180>>tex2html_deferred<<180>>\par\end<<181>>tex2html_deferred<<181>>
\end<<41>>itemize<<41>>
\begin<<182>>tex2html_deferred<<182>>\par\end<<183>>tex2html_deferred<<183>>
\subsection<<42>>Training Procedure and Results for Model A<<42>>
It was difficult to get good results with this model. The cost (as seen below) decreased very slowly compared to the number of iterations(1 epoch can be seen as about 170 iterations). Increasing the learning rate also didn't help at all with the accuracy and making further and further iterations until an eventual sweet spot, I was able to reach 56\%.
\begin<<184>>tex2html_deferred<<184>>\par\end<<185>>tex2html_deferred<<185>>
\begin<<43>>figure<<43>>[htbp]
\begin<<186>>tex2html_deferred<<186>>\centerline<<108>>\includegraphics[scale=0.18]<<44>>previousModelCostGraph.png<<44>><<108>>\end<<187>>tex2html_deferred<<187>>
\begin<<188>>tex2html_deferred<<188>>\caption<<45>>Cost vs. Iteration graph for model A<<45>>\end<<189>>tex2html_deferred<<189>>
\label<<46>>fig<<46>>
\end<<47>>figure<<47>>
\begin<<190>>tex2html_deferred<<190>>\par\end<<191>>tex2html_deferred<<191>>
Let's now look at the evaluation done by Deeplearning4j in a detailed manner, giving us the accuracy and other useful statistics:
\begin<<192>>tex2html_deferred<<192>>\par\end<<193>>tex2html_deferred<<193>>
\begin<<48>>figure<<48>>[htbp]
\begin<<194>>tex2html_deferred<<194>>\centerline<<109>>\includegraphics[scale=0.35]<<49>>accuracyOfPreviousModel.png<<49>><<109>>\end<<195>>tex2html_deferred<<195>>
\begin<<196>>tex2html_deferred<<196>>\caption<<50>>Test statistics for model A<<50>>\end<<197>>tex2html_deferred<<197>>
\label<<51>>fig<<51>>
\end<<52>>figure<<52>>
\begin<<198>>tex2html_deferred<<198>>\par\end<<199>>tex2html_deferred<<199>>
Figure 4 gives us the final statistics of predictions done on the test set. This was the best result I could get with this model with the accuracy, precision, recall, and F1 score being around 56\%. The confusion matrix gives us how many of which labels were predicted as which labels. The diagonal indexes portray successful predictions and the more we accumulate on the diagonal line, the better our network gets. And we can also observed that the predictions are well balanced. There is no one sidedness whatsoever with the predictions.
\begin<<200>>tex2html_deferred<<200>>\par\end<<201>>tex2html_deferred<<201>>
\subsection<<53>>Training Procedure and Results for Model B<<53>>
After achieving relatively low results with model A and getting a better grasp on the components of the network, I built a new one and got better results. The next figure below is the cost vs. iteration graph of this network after an overnight training session:
\begin<<202>>tex2html_deferred<<202>>\par\end<<203>>tex2html_deferred<<203>>
\begin<<54>>figure<<54>>[htbp]
\begin<<204>>tex2html_deferred<<204>>\centerline<<110>>\includegraphics[scale=0.18]<<55>>longTraining.png<<55>><<110>>\end<<205>>tex2html_deferred<<205>>
\begin<<206>>tex2html_deferred<<206>>\caption<<56>>Cost vs. Iteration graph for model B<<56>>\end<<207>>tex2html_deferred<<207>>
\label<<57>>fig<<57>>
\end<<58>>figure<<58>>
\begin<<208>>tex2html_deferred<<208>>\par\end<<209>>tex2html_deferred<<209>>
As we can see from this graph, it manages to converge to a much smaller cost and the curve of the graph resembles what would be normally expected in training a lot more than the previous model. Though since the training duration was very long, at the end it reiterated itself. But looking at this graph, I did another training run, this time with a more reasonable epoch number and tried to hit a sweet spot. Here is what I managed to obtain:
\begin<<210>>tex2html_deferred<<210>>\par\end<<211>>tex2html_deferred<<211>>
\begin<<59>>figure<<59>>[htbp]
\begin<<212>>tex2html_deferred<<212>>\centerline<<111>>\includegraphics[scale=0.18]<<60>>sweetspot.png<<60>><<111>>\end<<213>>tex2html_deferred<<213>>
\begin<<214>>tex2html_deferred<<214>>\caption<<61>>Cost vs. Iteration graph for model B<<61>>\end<<215>>tex2html_deferred<<215>>
\label<<62>>fig<<62>>
\end<<63>>figure<<63>>
\begin<<216>>tex2html_deferred<<216>>\par\end<<217>>tex2html_deferred<<217>>
After stopping at about 1550 or so iterations, the cost dropped to about 0.25. After this training procedure, the accuracy I obtained had already surpassed model B. In the next figure, we can observe the accuracy and the confusion matrix after this training run.
\begin<<218>>tex2html_deferred<<218>>\par\end<<219>>tex2html_deferred<<219>>
\newpage
\begin<<220>>tex2html_deferred<<220>>\par\end<<221>>tex2html_deferred<<221>>
\begin<<64>>figure<<64>>[htbp]
\begin<<222>>tex2html_deferred<<222>>\centerline<<112>>\includegraphics[scale=0.35]<<65>>penultimateAccuracy.png<<65>><<112>>\end<<223>>tex2html_deferred<<223>>
\begin<<224>>tex2html_deferred<<224>>\caption<<66>>Test statistics for model B<<66>>\end<<225>>tex2html_deferred<<225>>
\label<<67>>fig<<67>>
\end<<68>>figure<<68>>
\begin<<226>>tex2html_deferred<<226>>\par\end<<227>>tex2html_deferred<<227>>
As seen in figure 7, the accuracy obtained was close to 65\%, 9\% better than model B and the accumulation in the diagonal also increased when compared to B. For example, 63 hits for Grandpa Simpson in A compared to 32 in B. Even though the result was relatively better than, there seemed like there as still room for improvement. So I ran 20 to 30 more epochs on the model B network and approach an accuracy very close to 70\%. After getting close to 70\%, the accuracy of the model started increasing very slowly and due fear of overfitting, I decided to stop at this moment and use this network in my application since 70\% seem like it would be a decent rate for classifying 18 images. Here are the final results and test statistics for model B:
\begin<<228>>tex2html_deferred<<228>>\par\end<<229>>tex2html_deferred<<229>>
\begin<<69>>figure<<69>>[htbp]
\begin<<230>>tex2html_deferred<<230>>\centerline<<113>>\includegraphics[scale=0.35]<<70>>lastAccuracy.png<<70>><<113>>\end<<231>>tex2html_deferred<<231>>
\begin<<232>>tex2html_deferred<<232>>\caption<<71>>Test statistics for model B<<71>>\end<<233>>tex2html_deferred<<233>>
\label<<72>>fig<<72>>
\end<<73>>figure<<73>>
\begin<<234>>tex2html_deferred<<234>>\par\end<<235>>tex2html_deferred<<235>>
Again we notice the improvements compared to the previous run. What I've also noticed is that when looking at the confusion matrix, we can see that Bart and Lisa get mixed up a lot. This might be because they regularly appear together in the show, or simply because they look very similar. They are siblings after all. This might also account for some of the loss in accuracy.
\begin<<236>>tex2html_deferred<<236>>\par\end<<237>>tex2html_deferred<<237>>
\begin<<74>>figure<<74>>[htbp]
\begin<<238>>tex2html_deferred<<238>>\centerline<<114>>\includegraphics[scale=0.35]<<75>>bartAndLisa.jpg<<75>><<114>>\end<<239>>tex2html_deferred<<239>>
\begin<<240>>tex2html_deferred<<240>>\caption<<76>>Bart and Lisa look very similar<<76>>\end<<241>>tex2html_deferred<<241>>
\label<<77>>fig<<77>>
\end<<78>>figure<<78>>
\begin<<242>>tex2html_deferred<<242>>\par\end<<243>>tex2html_deferred<<243>>
\section<<79>>The Application<<79>>
Now let's move on to the application itself. After getting a decent hit rate in model B, I developed a nice developed a small, user-friendly application that takes in a directory (of the episodes we want to scan) and a character selection from a drop-down menu as input. Then, the application takes a frame of every 3 seconds from each episode and puts them through the convolutional neural network. It the network predicts the character we are searching for and the prediction value is more than 60\%, we accept this image and save it along with the time frame it occurs in and in which episode. I found 60\% to be the best threshold since if it were to be higher, even though the images would have a higher chance of actually having the character, there's a chance it would skip a lot of the images where the character appears due to the high threshold. And if it were to be lower, we might get too many images that don't have the character. Finally after going  through all the episodes, we show the images we accepted as thumbnails of the images coupled with the necessary information. Now let's take a look at a sample run of the application:
\begin<<244>>tex2html_deferred<<244>>\par\end<<245>>tex2html_deferred<<245>>
\begin<<80>>figure<<80>>[htbp]
\begin<<246>>tex2html_deferred<<246>>\centerline<<115>>\includegraphics[scale=0.5]<<81>>margeSelect.png<<81>><<115>>\end<<247>>tex2html_deferred<<247>>
\begin<<248>>tex2html_deferred<<248>>\caption<<82>>Select character and episode directory<<82>>\end<<249>>tex2html_deferred<<249>>
\label<<83>>fig<<83>>
\end<<84>>figure<<84>>
\begin<<250>>tex2html_deferred<<250>>\par\end<<251>>tex2html_deferred<<251>>
\begin<<85>>figure<<85>>[htbp]
\begin<<252>>tex2html_deferred<<252>>\centerline<<116>>\includegraphics[scale=0.5]<<86>>load.png<<86>><<116>>\end<<253>>tex2html_deferred<<253>>
\begin<<254>>tex2html_deferred<<254>>\caption<<87>>The loading screen while scanning episodes<<87>>\end<<255>>tex2html_deferred<<255>>
\label<<88>>fig<<88>>
\end<<89>>figure<<89>>
\begin<<256>>tex2html_deferred<<256>>\par\end<<257>>tex2html_deferred<<257>>
\newpage
\begin<<258>>tex2html_deferred<<258>>\par\end<<259>>tex2html_deferred<<259>>
\begin<<90>>figure<<90>>[htbp]
\begin<<260>>tex2html_deferred<<260>>\centerline<<117>>\includegraphics[scale=0.18]<<91>>margeResults.png<<91>><<117>>\end<<261>>tex2html_deferred<<261>>
\begin<<262>>tex2html_deferred<<262>>\caption<<92>>Results after scanning for Marge Simpson<<92>>\end<<263>>tex2html_deferred<<263>>
\label<<93>>fig<<93>>
\end<<94>>figure<<94>>
\begin<<264>>tex2html_deferred<<264>>\par\end<<265>>tex2html_deferred<<265>>
In figure 12, we can observe the resulting images along with their time frame and what video they belong to. In this sample run, we searched for Marge Simpson in 3 random Simpsons episodes and got very good results. As seen, only 2 of the first 16 images don't have Marge Simpson in it.
\begin<<266>>tex2html_deferred<<266>>\par\end<<267>>tex2html_deferred<<267>>
\section<<95>>Conclusion<<95>>
In this paper, we have observed the development process of an application that uses a convolutional neural network to classify images. While doing this, we have seen and compared the structure and performances of two different convolutional neural networks. We have examined the process of learning step by step. We have analyzed cost vs. iteration graphs of these networks along with their statistics on their test sets and took action or made assessments accordingly to get a better accuracy. Lastly we have observed a sample run of the application and saw how it worked. This application was developed for users to be able to quickly get scenes where a character appears while making compilation videos instead of searching through video after video by hand and it seems to give a pretty decent performance. Although there is definitely room for improvement. Maybe with more data or a better network model, a better accuracy could be achieved but due to hardware limitations and the training taking a very long time, a smaller accuracy had to do for now. And the user interface can definitely be better than it is. In the end, we have seen how convolutional neural networks are trained and used for image classification with a practical example.
\begin<<268>>tex2html_deferred<<268>>\par\end<<269>>tex2html_deferred<<269>>
\begin<<96>>thebibliography<<96>><<97>>00<<97>>
\bibitem<<98>>b1<<98>> “AnimalsClassification.java.”, Rahul Raj, June 7 2018, deeplearning4j - https://github.com/deeplearning4j/dl4j-examples/blob/master/dl4j-examples/src/main/java/org/deeplearning4j/examples/convolution/AnimalsClassification.java
\bibitem<<99>>b2<<99>> The Simpsons Characters Data, Alexattia, www.kaggle.com/alexattia/the-simpsons-characters-dataset
\end<<100>>thebibliography<<100>>
\vspace<<101>>12pt<<101>>
\begin<<270>>tex2html_deferred<<270>>\par\end<<271>>tex2html_deferred<<271>>
\end<<102>>document<<102>>
